# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FileZipperDialog
                                 A QGIS plugin
 This plugin unzip a file , extract files and zip them again.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-09-21
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Wafa
        email                : wafabenmiloud@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtWidgets import QFileDialog, QMessageBox
import os
import zipfile
from PyQt5.QtWidgets import QFileDialog

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'file_zipper_dialog_base.ui'))


class FileZipperDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(FileZipperDialog, self).__init__(parent)
        self.setupUi(self)
        self.pushButton.clicked.connect(self.import_data_function)

    def import_data_function(self):
        file_dialog = QFileDialog(self)
        file_dialog.setNameFilter("Zip Files (*.zip *.rar)")
        if file_dialog.exec_():
            selected_files = file_dialog.selectedFiles()
            if selected_files:
                selected_file = selected_files[0]

        temp_dir = 'extracted_files'
        os.makedirs(temp_dir, exist_ok=True)  
        
        with zipfile.ZipFile(selected_file, 'r') as zip_ref:
            
            shp_base_name = None
            for file_info in zip_ref.infolist():
                if file_info.filename.lower().endswith('.shp'):
                    shp_base_name = os.path.splitext(file_info.filename)[0]
                    break

            for file_info in zip_ref.infolist():
                file_base_name = os.path.splitext(file_info.filename)[0]
                if file_base_name == shp_base_name or file_info.filename.lower().endswith('.shp'):
                    zip_ref.extract(file_info, temp_dir)
        pass 

        output_zip_file = 'output.zip'
        with zipfile.ZipFile(output_zip_file, 'w', zipfile.ZIP_DEFLATED) as new_zip_ref:
            for root, dirs, files in os.walk(temp_dir):
                for file in files:
                    file_path = os.path.join(root, file)
                    relative_path = os.path.relpath(file_path, temp_dir)
                    new_zip_ref.write(file_path, relative_path)

        for file in os.listdir(temp_dir):
            file_path = os.path.join(temp_dir, file)
            os.remove(file_path)
        os.rmdir(temp_dir)
        
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Information)
        msg.setText("Extraction completed successfully.")
        msg.setWindowTitle("Extraction Complete")
        msg.exec_() 

        print("Extraction completed. Extracted files are in:", temp_dir)